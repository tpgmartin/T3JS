html
    head
        script(src='/js/lib/jquery-1.11.3.min.js')
        link(rel='stylesheet', href='/css/styles.css')
        title T3
    body
        .page-container

            h1 T3

            .grid-container

        script.
            $(function () {
                function createClearGrid() {
                    var gridSquares = $('.grid-square');

                    if (gridSquares) {
                        gridSquares.each(function () {
                            $(this).text('')
                        });
                    }

                    return grid = [
                        ['', '', ''],
                        ['', '', ''],
                        ['', '', '']
                    ];
                }

                function renderGrid(grid) {
                    var gridContainer = $('.grid-container');
                    // Use magic square numbers to determine winner
                    var refs = [ 2, 7, 6, 9, 5, 1, 4, 3, 8 ];

                    if ($('.grid-square')) {
                        for (var i = grid.length - 1; i >= 0; i--) {
                            for (var j = grid[i].length - 1; j >= 0; j--) {
                                var index = i * 3 + j;
                                gridContainer.prepend('<div class="grid-square" data-count="' + refs[index] + '" data-ref="' + i + ',' + j + '">' + grid[i][j] + '</div>');
                            }
                        }
                    }
                }

                function cyclePlayerToken(turn) {
                    return turn % 2 === 0 ? 'X' : 'O';
                }

                function updateGrid(ref, grid, occupiedSquares, turn) {
                    var token = cyclePlayerToken(turn);
                    var refArray = ref.toString().split(',');
                    var dataRef = $('[data-ref="' + ref + '"]');

                    grid[refArray[0]][refArray[1]] = token;
                    dataRef.text(token);
                    occupiedSquares[token].push(dataRef.data('count'));
                    checkGrid(token, turn);

                }

                function checkGrid(token, turn) {
                    //var sum = occupiedSquares[token].reduce(function (a,b) { return a + b; });

                    var squares = occupiedSquares[token];
                    var sum = 0;

                    if (turn < 8){
                        for (var i = 0, max = squares.length - 2; i < max; i++) {
                            j = i + 1;
                            k = squares.length - 1;
                            while (k >= j) {
                                sum = squares[i] + squares[j] + squares[k];
                                if (sum === 15) {
                                    alert('Winner Player ' + token);
                                    newGame();
                                }
                                sum !== 15 ? k-- : j++;
                            }
                        }
                    } else {
                        alert('Game is tied');
                        newGame();
                    }

                }

                function resetTurns() {
                    return turn = 0;
                }

                function resetOccupiedSquares() {
                    return occupiedSquares = {
                        'X': [],
                        'O': []
                    };
                }

                function newGame() {
                    createClearGrid();
                    resetTurns();
                    resetOccupiedSquares();
                }

                var turn = resetTurns();
                var occupiedSquares = resetOccupiedSquares();

                if (!grid) {
                    var grid = createClearGrid();
                    renderGrid(grid);
                }

                $('.grid-square').on('click', function () {;
                    var ref = $(this).data('ref');
                    var refArray = ref.toString().split(',');

                    if (!grid[refArray[0]][refArray[1]]) {
                        updateGrid(ref, grid, occupiedSquares, turn++);
                    } else {
                        alert('Square occupied');
                    }
                });
            });
